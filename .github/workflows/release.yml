name: Release & Changelog

on:
  workflow_run:
    workflows: ["Deploy to Production"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  release:
    name: Create Release & Generate Changelog
    runs-on: ubuntu-latest
    
    # Only run if Deploy to Production workflow succeeded and deployed changes
    if: github.event.workflow_run.conclusion == 'success'
    
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Check if deployment actually occurred
      id: deployment-check
      run: |
        # Check if the Deploy to Production workflow actually deployed changes
        # by looking for the deployment summary in the workflow run
        
        WORKFLOW_RUN_ID="${{ github.event.workflow_run.id }}"
        echo "üîç Checking if deployment workflow $WORKFLOW_RUN_ID actually deployed changes..."
        
        # Get the workflow run jobs and check for deployment summary
        JOBS_OUTPUT=$(gh api /repos/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID/jobs --jq '.jobs[].steps[] | select(.name == "Create deployment summary (deployed)") | .conclusion')
        
        if [ "$JOBS_OUTPUT" = "success" ]; then
          echo "‚úÖ Deployment occurred - release should be created"
          echo "deployment_occurred=true" >> $GITHUB_OUTPUT
        else
          echo "‚è≠Ô∏è No deployment occurred - skipping release"
          echo "deployment_occurred=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout production branch
      if: steps.deployment-check.outputs.deployment_occurred == 'true'
      uses: actions/checkout@v4
      with:
        ref: production  # Checkout production branch, not main
        fetch-depth: 0  # Need full history for changelog generation
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      if: steps.deployment-check.outputs.deployment_occurred == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      if: steps.deployment-check.outputs.deployment_occurred == 'true'
      run: npm ci --frozen-lockfile
    
    - name: Determine next version with proper semver logic
      if: steps.deployment-check.outputs.deployment_occurred == 'true'
      id: semver
      run: |
        echo "üîç DEBUG: Starting version calculation process..."
        
        # Get current package.json version for debugging
        CURRENT_PKG_VERSION=$(node -p "require('./package.json').version || 'null'")
        echo "üîç DEBUG: Current package.json version: $CURRENT_PKG_VERSION"
        
        # Get the highest tag from all branches
        echo "üîç DEBUG: Fetching all git tags..."
        git tag -l | head -20  # Show first 20 tags for debugging
        
        HIGHEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
        
        if [ -z "$HIGHEST_TAG" ]; then
          echo "‚ùå DEBUG: No previous tags found, starting with v0.1.0"
          HIGHEST_TAG="v0.0.0"  # Will increment to 0.1.0
        fi
        
        echo "üè∑Ô∏è DEBUG: Highest existing tag: $HIGHEST_TAG"
        
        # Get commits since the highest tag
        echo "üîç DEBUG: Getting commits since $HIGHEST_TAG..."
        COMMITS_SINCE_TAG=$(git log ${HIGHEST_TAG}..HEAD --oneline --pretty=format:"%s")
        
        if [ -z "$COMMITS_SINCE_TAG" ]; then
          echo "‚ùå DEBUG: No commits since $HIGHEST_TAG"
          echo "üîç DEBUG: Checking if we're on the right branch..."
          git branch -v
          echo "üîç DEBUG: Current HEAD:"
          git log --oneline -5
          exit 1
        fi
        
        echo "üìù DEBUG: Commits since $HIGHEST_TAG:"
        echo "$COMMITS_SINCE_TAG"
        echo "üîç DEBUG: Total commits found: $(echo "$COMMITS_SINCE_TAG" | wc -l)"
        
        # Parse version numbers from highest tag
        CURRENT_VERSION=${HIGHEST_TAG#v}  # Remove 'v' prefix
        echo "üîç DEBUG: Current version (without v): $CURRENT_VERSION"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        echo "üîç DEBUG: Parsed version parts - MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"
        
        # Determine increment type based on conventional commits
        echo "üîç DEBUG: Analyzing commit types..."
        HAS_BREAKING=$(echo "$COMMITS_SINCE_TAG" | grep -E "(BREAKING CHANGE|!:)" | wc -l)
        HAS_FEAT=$(echo "$COMMITS_SINCE_TAG" | grep -E "^(feat|‚ú®)" | wc -l)
        HAS_FIX=$(echo "$COMMITS_SINCE_TAG" | grep -E "^(fix|üêõ|üîß)" | wc -l)
        
        echo "üîç DEBUG: Commit analysis results:"
        echo "  - Breaking changes: $HAS_BREAKING"
        echo "  - Features: $HAS_FEAT"
        echo "  - Fixes: $HAS_FIX"
        
        # Apply semver increment rules
        if [ "$HAS_BREAKING" -gt 0 ]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          INCREMENT_TYPE="major"
        elif [ "$HAS_FEAT" -gt 0 ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
          INCREMENT_TYPE="minor"
        elif [ "$HAS_FIX" -gt 0 ]; then
          PATCH=$((PATCH + 1))
          INCREMENT_TYPE="patch"
        else
          echo "‚ùå DEBUG: No significant changes found (feat/fix/BREAKING)"
          echo "üîç DEBUG: All commits:"
          echo "$COMMITS_SINCE_TAG" | head -10
          exit 1
        fi
        
        NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "üéØ DEBUG: Next version calculated: $NEXT_VERSION (${INCREMENT_TYPE} increment)"
        echo "üìä DEBUG: Changes: $HAS_BREAKING breaking, $HAS_FEAT features, $HAS_FIX fixes"
        
        # Update package.json with the calculated version
        echo "üîç DEBUG: Updating package.json with version $NEXT_VERSION..."
        node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          console.log('üîç DEBUG: package.json before update:', JSON.stringify(pkg, null, 2));
          pkg.version = '$NEXT_VERSION';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          console.log('üîç DEBUG: package.json after update:', JSON.stringify(pkg, null, 2));
        "
        
        # Verify the version was set correctly
        UPDATED_VERSION=$(node -p "require('./package.json').version")
        echo "üîç DEBUG: Verified package.json version after update: $UPDATED_VERSION"
        
        if [ "$UPDATED_VERSION" != "$NEXT_VERSION" ]; then
          echo "‚ùå ERROR: Version mismatch! Expected: $NEXT_VERSION, Got: $UPDATED_VERSION"
          exit 1
        fi
        
        echo "calculated-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "increment-type=$INCREMENT_TYPE" >> $GITHUB_OUTPUT
        echo "highest-tag=$HIGHEST_TAG" >> $GITHUB_OUTPUT
    
    - name: Generate Changelog from Conventional Commits
      id: changelog
      if: steps.deployment-check.outputs.deployment_occurred == 'true'
      run: |
        echo "üîÑ Generating changelog manually to ensure proper version handling..."
        
        # Use the calculated version from previous step
        VERSION="${{ steps.semver.outputs.calculated-version }}"
        echo "Using version: $VERSION"
        
        # Create a basic changelog entry for this version
        CURRENT_DATE=$(date +%Y-%m-%d)
        COMMITS_SINCE_TAG=$(git log ${{ steps.semver.outputs.highest-tag }}..HEAD --oneline --pretty=format:"* %s ([%h](https://github.com/tmttn/tmttn.eu/commit/%H))")
        
        # Create temporary changelog with proper version
        echo "# Changelog" > temp_changelog.md
        echo "" >> temp_changelog.md
        echo "All notable changes to Thomas Metten's personal portfolio website are documented in this file." >> temp_changelog.md
        echo "" >> temp_changelog.md
        echo "## <small>$VERSION ($CURRENT_DATE)</small>" >> temp_changelog.md
        echo "" >> temp_changelog.md
        echo "### Summary" >> temp_changelog.md
        echo "Release with improvements and updates." >> temp_changelog.md
        echo "" >> temp_changelog.md
        echo "$COMMITS_SINCE_TAG" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Append existing changelog content (skip the header)
        if [ -f CHANGELOG.md ]; then
          tail -n +4 CHANGELOG.md >> temp_changelog.md
        fi
        
        mv temp_changelog.md CHANGELOG.md
        
        echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS_SINCE_TAG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Force new release creation
      if: steps.deployment-check.outputs.deployment_occurred == 'true'
      id: check-release
      run: |
        echo "exists=false" >> $GITHUB_OUTPUT
        echo "üöÄ Force creating new release for v${{ steps.semver.outputs.calculated-version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Validate calculated version
      id: validate-version
      if: steps.deployment-check.outputs.deployment_occurred == 'true' && steps.check-release.outputs.exists == 'false'
      run: |
        NEW_VERSION="${{ steps.semver.outputs.calculated-version }}"
        echo "üéØ Using calculated version: $NEW_VERSION"
        echo "üìà Increment type: ${{ steps.semver.outputs.increment-type }}"
        echo "üè∑Ô∏è Previous tag: ${{ steps.semver.outputs.highest-tag }}"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Commit version and changelog changes
      if: steps.deployment-check.outputs.deployment_occurred == 'true' && steps.check-release.outputs.exists == 'false'
      run: |
        echo "üìù Committing version bump and changelog updates..."
        
        # Configure git for the action
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add the updated files
        git add CHANGELOG.md package.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üìù docs: sync version v${{ steps.validate-version.outputs.version }} and CHANGELOG.md [skip ci]"
          echo "‚úÖ Version and changelog committed"
        fi
    
    - name: Sync version and CHANGELOG.md to main branch
      if: steps.deployment-check.outputs.deployment_occurred == 'true' && steps.check-release.outputs.exists == 'false'
      run: |
        echo "üîÑ Syncing version bump and CHANGELOG.md back to main branch..."
        
        # Store the updated files
        cp CHANGELOG.md /tmp/updated-changelog.md
        cp package.json /tmp/updated-package.json
        
        # Switch to main branch
        git fetch origin main
        git checkout main
        
        # Copy the updated files
        cp /tmp/updated-changelog.md CHANGELOG.md
        cp /tmp/updated-package.json package.json
        
        # Check if there are actual changes
        if git diff --quiet CHANGELOG.md package.json; then
          echo "No changes to sync"
        else
          echo "Committing version bump and CHANGELOG.md to main branch..."
          git add CHANGELOG.md package.json
          git commit -m "üìù docs: sync version v${{ steps.validate-version.outputs.version }} and CHANGELOG.md [skip ci]"
          git push origin main
          echo "‚úÖ Version and CHANGELOG.md synced to main branch"
        fi
    
    - name: Create Release with auto-generated notes
      if: steps.deployment-check.outputs.deployment_occurred == 'true' && steps.check-release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.validate-version.outputs.version }}
        name: Release v${{ steps.validate-version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog_content }}
        target_commitish: production
        make_latest: true
        generate_release_notes: true
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release Summary
      if: steps.deployment-check.outputs.deployment_occurred == 'true' && steps.check-release.outputs.exists == 'false'
      run: |
        echo "## üéâ Release Created Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: v${{ steps.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: production" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version & CHANGELOG**: Updated on production branch and synced to main" >> $GITHUB_STEP_SUMMARY
        echo "- **CI Impact**: Changelog sync uses [skip ci] to prevent new pipeline" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The release includes all changes that were rebased to the production branch." >> $GITHUB_STEP_SUMMARY
    
    - name: Skip Release (No Deployment)
      if: steps.deployment-check.outputs.deployment_occurred == 'false'
      run: |
        echo "## ‚è≠Ô∏è Release Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Reason**: No user-facing deployment occurred" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Workflow**: Only test/docs/CI changes were detected" >> $GITHUB_STEP_SUMMARY
        echo "- **Result**: No release created since no production changes were deployed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "A release will be created automatically when user-facing changes are deployed to production." >> $GITHUB_STEP_SUMMARY