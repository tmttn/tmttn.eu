name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

jobs:
  deploy-to-production:
    name: Deploy to Production Branch
    runs-on: ubuntu-latest
    
    # Only run if CI workflow succeeded
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for merging
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --frozen-lockfile
    
    - name: Build current main branch
      run: npm run build
    
    - name: Store current build artifacts
      run: |
        echo "📦 Storing current build artifacts..."
        mkdir -p /tmp/current-build
        cp -r out/* /tmp/current-build/
        echo "Current build size: $(du -sh /tmp/current-build/)"
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Check production branch and compare builds
      id: build-comparison
      run: |
        echo "🔍 Checking if production branch exists and comparing builds..."
        
        # Fetch the latest main branch
        git fetch origin main
        git checkout main
        
        BUILD_CHANGED=true
        
        # Check if production branch exists
        if git ls-remote --exit-code --heads origin production; then
          echo "Production branch exists, checking for build differences..."
          git fetch origin production
          git checkout production
          
          # Build the current production branch
          npm run build
          
          # Compare build content excluding Next.js build-specific artifacts
          echo "Comparing build content (excluding Next.js build IDs and hashes)..."
          
          # Simple approach: compare file lists and key content files
          # Exclude _next directory which contains build-specific hashes
          
          # Create file lists excluding build-specific paths
          find /tmp/current-build -type f ! -path "*/_next/*" | sed "s|/tmp/current-build/||" | sort > /tmp/current-files.txt
          find out -type f ! -path "*/_next/*" | sed "s|out/||" | sort > /tmp/production-files.txt
          
          # Compare file lists first
          if ! diff /tmp/current-files.txt /tmp/production-files.txt > /dev/null 2>&1; then
            echo "🔄 File list differs - deployment needed"
            echo "File differences:"
            diff /tmp/current-files.txt /tmp/production-files.txt || true
            BUILD_CHANGED=true
          else
            # File lists are same, now compare content of key files (HTML, CSS, etc.)
            echo "File lists identical, comparing content..."
            CONTENT_CHANGED=false
            
            # Compare HTML files (normalize build IDs)
            for file in $(find /tmp/current-build -name "*.html" | sed "s|/tmp/current-build/||"); do
              if [ -f "out/$file" ]; then
                # Normalize build IDs before comparison
                sed 's/_next\/static\/[a-zA-Z0-9_-]*\//_next\/static\/BUILD_ID\//g' "/tmp/current-build/$file" > "/tmp/current-$file.norm"
                sed 's/_next\/static\/[a-zA-Z0-9_-]*\//_next\/static\/BUILD_ID\//g' "out/$file" > "/tmp/production-$file.norm"
                
                if ! diff "/tmp/current-$file.norm" "/tmp/production-$file.norm" > /dev/null 2>&1; then
                  echo "HTML content differs: $file"
                  CONTENT_CHANGED=true
                  break
                fi
                
                rm -f "/tmp/current-$file.norm" "/tmp/production-$file.norm"
              fi
            done
            
            # Compare other non-JS files
            if [ "$CONTENT_CHANGED" = "false" ]; then
              for file in $(find /tmp/current-build -type f ! -path "*/_next/*" ! -name "*.html" | sed "s|/tmp/current-build/||"); do
                if [ -f "out/$file" ]; then
                  if ! diff "/tmp/current-build/$file" "out/$file" > /dev/null 2>&1; then
                    echo "Content differs: $file"
                    CONTENT_CHANGED=true
                    break
                  fi
                fi
              done
            fi
            
            if [ "$CONTENT_CHANGED" = "true" ]; then
              echo "🔄 Build content differs - deployment needed"
              BUILD_CHANGED=true
            else
              echo "✅ Build content is functionally identical - no deployment needed"
              echo "Only Next.js build IDs and internal artifacts differ"
              BUILD_CHANGED=false
            fi
          fi
          
          # Clean up temp files
          rm -f /tmp/current-files.txt /tmp/production-files.txt
        else
          echo "Production branch doesn't exist - deployment needed"
          BUILD_CHANGED=true
        fi
        
        echo "build_changed=$BUILD_CHANGED" >> $GITHUB_OUTPUT
        
        # Switch back to main for deployment
        git checkout main
    
    - name: Deploy to production
      if: steps.build-comparison.outputs.build_changed == 'true'
      run: |
        echo "🚀 Starting deployment to production branch..."
        
        # Fetch the latest main branch
        git fetch origin main
        git checkout main
        
        # Fetch production branch (create if doesn't exist)
        if git ls-remote --exit-code --heads origin production; then
          echo "Production branch exists, fetching..."
          git fetch origin production
          git checkout production
          
          # Check if we're already up to date
          if git merge-base --is-ancestor origin/main HEAD; then
            echo "Production is already up to date with main"
            exit 0
          fi
          
          # Try to fast-forward first
          echo "Attempting fast-forward merge..."
          if git merge --ff-only origin/main; then
            echo "Successfully fast-forwarded production to main"
          else
            echo "Fast-forward not possible, performing rebase..."
            # Reset to remote state first to avoid conflicts
            git reset --hard origin/production
            if ! git rebase origin/main; then
              echo "❌ Rebase failed. This may indicate conflicts that need manual resolution."
              echo "Aborting rebase and exiting..."
              git rebase --abort
              exit 1
            fi
          fi
        else
          echo "Production branch doesn't exist, creating..."
          git checkout -b production
        fi
        
        # Push to production (force push if needed for deployment)
        echo "Pushing to production branch..."
        if ! git push origin production; then
          echo "Normal push failed, attempting force push for deployment..."
          git push --force origin production
        fi
        
        echo "✅ Successfully deployed to production branch"
    
    - name: Skip deployment (no build changes)
      if: steps.build-comparison.outputs.build_changed == 'false'
      run: |
        echo "⏭️ Skipping deployment - no changes in build artifacts"
        echo "The website content is identical to what's already in production."
    
    - name: Create deployment summary (deployed)
      if: steps.build-comparison.outputs.build_changed == 'true'
      run: |
        echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Branch**: production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **CI Run**: [${{ github.event.workflow_run.html_url }}](${{ github.event.workflow_run.html_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployed (build artifacts changed)" >> $GITHUB_STEP_SUMMARY
        echo "- **Result**: Production branch updated, Netlify will deploy changes" >> $GITHUB_STEP_SUMMARY
    
    - name: Create deployment summary (skipped)
      if: steps.build-comparison.outputs.build_changed == 'false'
      run: |
        echo "## ⏭️ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Branch**: production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **CI Run**: [${{ github.event.workflow_run.html_url }}](${{ github.event.workflow_run.html_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ⏭️ Skipped (no build changes)" >> $GITHUB_STEP_SUMMARY
        echo "- **Result**: Build artifacts identical, no Netlify deployment needed" >> $GITHUB_STEP_SUMMARY