name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

jobs:
  deploy-to-production:
    name: Deploy to Production Branch
    runs-on: ubuntu-latest
    
    # Only run if CI workflow succeeded
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for merging
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --frozen-lockfile
    
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Check for user-facing changes
      id: change-detection
      run: |
        echo "🔍 Analyzing source code changes to determine if deployment is needed..."
        
        # Fetch the latest main branch
        git fetch origin main
        git checkout main
        
        DEPLOY_NEEDED=true
        
        # Check if production branch exists
        if git ls-remote --exit-code --heads origin production; then
          echo "Production branch exists, checking for user-facing changes..."
          git fetch origin production
          
          # Get the list of changed files between production and main
          CHANGED_FILES=$(git diff --name-only origin/production...origin/main)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "✅ No changes between production and main - no deployment needed"
            DEPLOY_NEEDED=false
          else
            echo "📝 Files changed since last production deploy:"
            echo "$CHANGED_FILES"
            echo ""
            
            # Check if any changed files affect the user-facing website
            USER_FACING_CHANGES=false
            
            # Paths that affect the live website
            USER_FACING_PATHS=(
              "src/"
              "pages/"
              "public/"
              "styles/"
              "components/"
              "features/"
              "contexts/"
              "services/"
              "utils/"
              "package.json"
              "package-lock.json"
              "next.config.js"
              "tsconfig.json"
              "tailwind.config.js"
              "scripts/"
            )
            
            # Paths that should NOT trigger deployment
            NON_DEPLOYMENT_PATHS=(
              "__tests__/"
              ".github/"
              "cypress/"
              "README.md"
              "CHANGELOG.md"
              "CLAUDE.md"
              ".gitignore"
              ".eslintrc"
              "jest.config.js"
              ".versionrc.json"
              "cypress.config"
              ".env.example"
              "docs/"
            )
            
            echo "🔍 Analyzing changes for user-facing impact..."
            
            for file in $CHANGED_FILES; do
              # Check if file should NOT trigger deployment
              SKIP_FILE=false
              for non_deploy_path in "${NON_DEPLOYMENT_PATHS[@]}"; do
                if [[ "$file" == $non_deploy_path* ]]; then
                  echo "⏭️ Skipping non-user-facing: $file"
                  SKIP_FILE=true
                  break
                fi
              done
              
              # If not skipped, check if it's user-facing
              if [ "$SKIP_FILE" = "false" ]; then
                # Special handling for package.json - check content changes
                if [[ "$file" == "package.json" ]]; then
                  echo "📦 Analyzing package.json changes..."
                  PACKAGE_DIFF=$(git diff origin/production...origin/main -- package.json)
                  
                  # Count different types of changes
                  VERSION_CHANGES=$(echo "$PACKAGE_DIFF" | grep -E '^[+-].*"version"' | wc -l)
                  METADATA_CHANGES=$(echo "$PACKAGE_DIFF" | grep -E '^[+-].*"(description|keywords|author|license|repository|bugs|homepage)"' | wc -l)
                  DEV_CHANGES=$(echo "$PACKAGE_DIFF" | grep -E '^[+-].*"devDependencies"' | wc -l)
                  PROD_CHANGES=$(echo "$PACKAGE_DIFF" | grep -E '^[+-].*"(dependencies|engines|overrides|main|module|exports)"' | wc -l)
                  BUILD_SCRIPT_CHANGES=$(echo "$PACKAGE_DIFF" | grep -E '^[+-].*"scripts"' | grep -vE '"(test|dev|lint|format|cypress)"' | wc -l)
                  TOTAL_CHANGES=$(echo "$PACKAGE_DIFF" | grep -E '^[+-]' | wc -l)
                  
                  echo "🔍 DEBUG: version=$VERSION_CHANGES, metadata=$METADATA_CHANGES, dev=$DEV_CHANGES, prod=$PROD_CHANGES, scripts=$BUILD_SCRIPT_CHANGES, total=$TOTAL_CHANGES"
                  
                  # Calculate non-production changes (version + metadata + dev deps)
                  NON_PROD_CHANGES=$((VERSION_CHANGES + METADATA_CHANGES + DEV_CHANGES))
                  
                  # If only version/metadata/dev changes (no production impact)
                  if [ "$TOTAL_CHANGES" -eq "$NON_PROD_CHANGES" ] && [ "$TOTAL_CHANGES" -gt 0 ]; then
                    echo "⏭️ Skipping package.json changes (version/metadata/dev only - no production impact)"
                  # If there are production dependencies or build script changes
                  elif [ "$PROD_CHANGES" -gt 0 ] || [ "$BUILD_SCRIPT_CHANGES" -gt 0 ]; then
                    echo "✅ User-facing package.json changes detected (production dependencies or build scripts)"
                    USER_FACING_CHANGES=true
                  # Any other changes not categorized above
                  elif [ "$TOTAL_CHANGES" -gt "$NON_PROD_CHANGES" ]; then
                    echo "✅ User-facing package.json changes detected (other production changes)"
                    USER_FACING_CHANGES=true
                  else
                    echo "⏭️ Skipping package.json changes (no production impact detected)"
                  fi
                # Special handling for package-lock.json - only if dependencies changed
                elif [[ "$file" == "package-lock.json" ]]; then
                  echo "🔒 Checking if package-lock.json changes affect production dependencies..."
                  # If package.json dependencies changed, then package-lock is also user-facing
                  if echo "$CHANGED_FILES" | grep -q "package.json"; then
                    echo "✅ Package-lock changes detected alongside package.json - likely production impact"
                    USER_FACING_CHANGES=true
                  else
                    # Check if only devDependencies in lockfile changed
                    LOCK_DIFF=$(git diff origin/production...origin/main -- package-lock.json)
                    if echo "$LOCK_DIFF" | grep -E '"node_modules/.+": \{' | grep -vE '"node_modules/(jest|cypress|eslint|prettier|@types)'; then
                      echo "✅ Production dependencies in package-lock.json changed"
                      USER_FACING_CHANGES=true
                    else
                      echo "⏭️ Skipping package-lock.json changes (dev dependencies only)"
                    fi
                  fi
                else
                  # Regular file path checking
                  for user_path in "${USER_FACING_PATHS[@]}"; do
                    if [[ "$file" == $user_path* ]] && [[ "$file" != "package.json" ]] && [[ "$file" != "package-lock.json" ]]; then
                      echo "✅ User-facing change detected: $file"
                      USER_FACING_CHANGES=true
                      break
                    fi
                  done
                  
                  # If no user-facing path matched, it might be a root-level config file
                  if [ "$USER_FACING_CHANGES" = "false" ]; then
                    echo "❓ Unclassified change (treating as user-facing): $file"
                    USER_FACING_CHANGES=true
                  fi
                fi
              fi
            done
            
            if [ "$USER_FACING_CHANGES" = "true" ]; then
              echo ""
              echo "🚀 User-facing changes detected - deployment needed"
              DEPLOY_NEEDED=true
            else
              echo ""
              echo "✅ Only non-user-facing changes detected - no deployment needed"
              echo "Changes are limited to tests, docs, CI, or development files"
              DEPLOY_NEEDED=false
            fi
          fi
        else
          echo "Production branch doesn't exist - initial deployment needed"
          DEPLOY_NEEDED=true
        fi
        
        echo "deploy_needed=$DEPLOY_NEEDED" >> $GITHUB_OUTPUT
    
    - name: Deploy to production
      if: steps.change-detection.outputs.deploy_needed == 'true'
      run: |
        echo "🚀 Starting deployment to production branch..."
        
        # Build the current main branch for deployment
        echo "📦 Building main branch for deployment..."
        npm run build
        
        # Fetch the latest main branch
        git fetch origin main
        git checkout main
        
        # Fetch production branch (create if doesn't exist)
        if git ls-remote --exit-code --heads origin production; then
          echo "Production branch exists, fetching..."
          git fetch origin production
          git checkout production
          
          # Check if we're already up to date
          if git merge-base --is-ancestor origin/main HEAD; then
            echo "Production is already up to date with main"
            exit 0
          fi
          
          # Try to fast-forward first
          echo "Attempting fast-forward merge..."
          if git merge --ff-only origin/main; then
            echo "Successfully fast-forwarded production to main"
          else
            echo "Fast-forward not possible, performing rebase..."
            # Reset to remote state first to avoid conflicts
            git reset --hard origin/production
            if ! git rebase origin/main; then
              echo "❌ Rebase failed. This may indicate conflicts that need manual resolution."
              echo "Aborting rebase and exiting..."
              git rebase --abort
              exit 1
            fi
          fi
        else
          echo "Production branch doesn't exist, creating..."
          git checkout -b production
        fi
        
        # Push to production (force push if needed for deployment)
        echo "Pushing to production branch..."
        if ! git push origin production; then
          echo "Normal push failed, attempting force push for deployment..."
          git push --force origin production
        fi
        
        echo "✅ Successfully deployed to production branch"
    
    - name: Skip deployment (no user-facing changes)
      if: steps.change-detection.outputs.deploy_needed == 'false'
      run: |
        echo "⏭️ Skipping deployment - no user-facing changes detected"
        echo "Changes are limited to tests, docs, CI, or development files."
    
    - name: Create deployment summary (deployed)
      if: steps.change-detection.outputs.deploy_needed == 'true'
      run: |
        echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Branch**: production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **CI Run**: [${{ github.event.workflow_run.html_url }}](${{ github.event.workflow_run.html_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployed (user-facing changes detected)" >> $GITHUB_STEP_SUMMARY
        echo "- **Result**: Production branch updated, Netlify will deploy changes" >> $GITHUB_STEP_SUMMARY
    
    - name: Create deployment summary (skipped)
      if: steps.change-detection.outputs.deploy_needed == 'false'
      run: |
        echo "## ⏭️ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Branch**: production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **CI Run**: [${{ github.event.workflow_run.html_url }}](${{ github.event.workflow_run.html_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ⏭️ Skipped (no user-facing changes)" >> $GITHUB_STEP_SUMMARY
        echo "- **Result**: Only test/docs/CI changes detected, no Netlify deployment needed" >> $GITHUB_STEP_SUMMARY